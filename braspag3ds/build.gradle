plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'com.kezong.fat-aar'
}

ext {
    bintrayRepo = 'braspag3ds'
    bintrayName = 'braspag3ds'

    publishedGroupId = 'br.com.braspag'
    artifact = 'braspag3ds'
    libraryVersion = '1.7.3'

    libraryDescription = 'SDK para auxiliar na utilização do 3DS 2.0'

    siteUrl = 'https://github.com/Braspag/braspag-3ds-android'
    gitUrl = 'https://github.com/Braspag/braspag-3ds-android.git'

    developerId = 'FelipeToniolo'
    developerName = 'Felipe Augusto Toniolo'
    developerEmail = 'ftoniolo.aat@gmail.com'
    developerUrl = "https://github.com/FelipeToniolo"

    licenseName = 'MIT License'
    licenseUrl = 'https://github.com/Braspag/braspag-3ds-android/blob/master/LICENSE'
    allLicenses = ["MIT"]
}

android {
    lintOptions {
        abortOnError false
    }

    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName libraryVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildTypes.each {
        it.buildConfigField('String', 'X_SDK_VERSION', "\"3DS-Android@$libraryVersion\"")
        it.buildConfigField('String', 'APP_CENTER_KEY', "\"897ccc34-4dc4-4255-b7eb-131d9c62b5a3\"")

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

Properties properties = new Properties()
if (project.rootProject.file('local.properties').canRead()) {
    properties.load(project.rootProject.file("local.properties").newDataInputStream())
    ext.cardinal_url = properties.getProperty('CARDINAL_URL')
    ext.cardinal_user = properties.getProperty('CARDINAL_USER')
    ext.cardinal_key = properties.getProperty('CARDINAL_KEY')
} else {
    ext.cardinal_url = System.getenv('CARDINAL_URL')
    ext.cardinal_user = System.getenv('CARDINAL_USER')
    ext.cardinal_key = System.getenv('CARDINAL_KEY')
}

repositories {
    maven {
        url cardinal_url
        credentials {
            username cardinal_user // Bintray username
            password cardinal_key  // Bintray user API Key
        }
    }
}

fataar {
    transitive = true
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.6.0'
    implementation 'org.conscrypt:conscrypt-android:2.2.1'

    //Entender Fat aar como embed um file aar
    //SDK Cardinal
    implementation fileTree(include: ['*.aar', '*jar'], dir: 'libs')
//    flavor1Embed project(path: ':lib-cardinal', configuration: 'default')
    implementation project(path: ':lib-cardinal', configuration: 'default')

    //SDK Cardinal
//    implementation 'org.jfrog.cardinalcommerce.gradle:cardinalmobilesdk:2.2.3-2@aar'

    //JWT.IO
    implementation 'com.auth0:java-jwt:3.18.1'

    //APPCENTER
    def appCenterSdkVersion = '4.3.1'
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}